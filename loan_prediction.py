# -*- coding: utf-8 -*-
"""python_seminor

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LPSdB48YiIR8B_Tm1XDJKft02O7iUOvk
"""

#EDA
from google.colab import drive

drive.mount('/content/gdrive')

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
data=pd.read_csv(r"/content/gdrive/MyDrive/train/loan.csv")
display(pd.DataFrame(data))

data.isnull().sum()

data['LoanAmount']=data['LoanAmount'].fillna(data['LoanAmount'].mean())

data['Credit_History']=data['Credit_History'].fillna(data['Credit_History'].median())

data.dropna(inplace=True)

data.isnull().sum()

data.shape

data['Gender'].replace({'Male':0,'Female':1},inplace=True)
data['Married'].replace({'No':0,'Yes':1},inplace=True)
data['Education'].replace({'Graduate':0,'Not Graduate':1},inplace=True)
data['Self_Employed'].replace({'No':0,'Yes':1},inplace=True)
data['Property_Area'].replace({'Urban':0,'Rural':1,'Semiurban':2},inplace=True)
data['Loan_Status'].replace({'Y':0,'N':1},inplace=True)
data['Dependents'].replace({'0':0,'1':1,'2':2,'3+':3},inplace=True)

#filling the missing values with mode() for the categorical columns 
data["Gender"].fillna(data["Gender"].mode()[0],inplace=True)
data["Married"].fillna(data["Married"].mode()[0],inplace=True)
data["Dependents"].fillna(data["Dependents"].mode()[0],inplace=True)
data["Self_Employed"].fillna(data["Self_Employed"].mode()[0],inplace=True)
data["Loan_Amount_Term"].fillna(data["Loan_Amount_Term"].mode()[0],inplace=True)
data["Credit_History"].fillna(data["Credit_History"].mode()[0],inplace=True)

#filling teh missing values with mean() for the discrete value columns
data["LoanAmount"].fillna(data["LoanAmount"].mean(),inplace=True)

data.dtypes

data['LoanAmount'].value_counts()

data['LoanAmount'].unique()



corelation=data.corr()
sns.heatmap(corelation,xticklabels=corelation.columns,yticklabels=corelation.columns,annot=True)

plt.figure(figsize=(20,10))
sns.set(font_scale=0.75)
plt.subplot(331)
sns.countplot(data['Gender'],hue=data['Loan_Status'])

plt.subplot(332)
sns.countplot(data['Married'],hue=data['Loan_Status'])

plt.subplot(333)
sns.countplot(data['Self_Employed'],hue=data['Loan_Status'])

plt.subplot(334)
sns.countplot(data['Education'],hue=data['Loan_Status'])

plt.subplot(331)
sns.countplot(data['Property_Area'],hue=data['Loan_Status'])

sns.distplot(data["LoanAmount"],bins=10)

sns.pairplot(data)

data.nunique()

data.mean(axis=0)

#Using logistic regression
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn import metrics

x=data.iloc[1:542,1:12].values
y=data.iloc[1:542,12].values

#logistic model
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=0)

model=LogisticRegression()
model.fit(x_train,y_train)
Ir_prediction=model.predict(x_test)
print("the logistic regression acracy=",metrics.accuracy_score(Ir_prediction,y_test))

print("x_predict is",Ir_prediction)
print("y_prediction is",y_test)